{"ast":null,"code":"var _jsxFileName = \"/home/utsav.goel/Desktop/Reacttask/src/components/themebutton.js\",\n    _s = $RefreshSig$();\n\nimport ThemeContext, { themes } from \"../page/themecontext\";\nimport { useContext, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ThemeButton = () => {\n  _s();\n\n  const {\n    theme,\n    setTheme\n  } = useContext(ThemeContext);\n\n  const toggleTheme = () => {\n    theme == themes.dark ? setTheme(themes.light) : setTheme(themes.dark);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleTheme,\n      children: \"Theme Changer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(ThemeButton, \"CrVyfxkbaVKs8B1q77aq0EAdMEo=\");\n\n_c = ThemeButton;\nexport default ThemeButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"ThemeButton\");","map":{"version":3,"sources":["/home/utsav.goel/Desktop/Reacttask/src/components/themebutton.js"],"names":["ThemeContext","themes","useContext","useState","ThemeButton","theme","setTheme","toggleTheme","dark","light"],"mappings":";;;AAAA,OAAOA,YAAP,IAAuBC,MAAvB,QAAqC,sBAArC;AACA,SAASC,UAAT,EAAqBC,QAArB,QAAqC,OAArC;;;;AACA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACtB,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAsBJ,UAAU,CAACF,YAAD,CAAtC;;AAEA,QAAMO,WAAW,GAAG,MAAM;AACtBF,IAAAA,KAAK,IAAIJ,MAAM,CAACO,IAAhB,GAAuBF,QAAQ,CAACL,MAAM,CAACQ,KAAR,CAA/B,GAAgDH,QAAQ,CAACL,MAAM,CAACO,IAAR,CAAxD;AACH,GAFD;;AAGA,sBACI;AAAA,2BACI;AAAQ,MAAA,OAAO,EAAED,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ,mBADJ;AAKH,CAXD;;GAAMH,W;;KAAAA,W;AAYN,eAAeA,WAAf","sourcesContent":["import ThemeContext, { themes } from \"../page/themecontext\";\nimport { useContext, useState } from \"react\";\nconst ThemeButton = () => {\n    const { theme, setTheme } = useContext(ThemeContext)\n\n    const toggleTheme = () => {\n        theme == themes.dark ? setTheme(themes.light) : setTheme(themes.dark);\n    }\n    return (\n        <>\n            <button onClick={toggleTheme}>Theme Changer</button>\n        </>\n    )\n}\nexport default ThemeButton;"]},"metadata":{},"sourceType":"module"}